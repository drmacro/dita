<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA 2.x Concept//EN" "concept.dtd">
<concept id="shell-dtd-coding-reqs" xml:lang="en-us">
    <title>DTD: Coding requirements for document-type shells</title>
    <shortdesc>A DTD-based document-type shell is organized into sections; each section contains
        entity declarations that follow specific coding rules.</shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm>coding requirements<indexterm>DTD<indexterm>document-type
                            shells</indexterm></indexterm></indexterm>
                <indexterm>document-type shells<indexterm>DTD<indexterm>sections, patterns
                            of</indexterm></indexterm></indexterm>
                <indexterm>document-type shells<indexterm>DTD<indexterm>parameter
                            entities</indexterm></indexterm></indexterm>
                <indexterm>DTD<indexterm>coding requirements<indexterm>document-type
                            shells</indexterm></indexterm></indexterm>
                <indexterm>DTD<indexterm>parameter entities, use of</indexterm></indexterm>
                <indexterm>naming conventions<indexterm>document-type shells<indexterm>parameter
                            entities</indexterm></indexterm></indexterm>
            </keywords>
        </metadata>
    </prolog>
    <conbody>
        <p>The DTD-based approach to configuration, specialization, and <ph rev="2.0">element
                configuration (constraint and expansion)</ph> relies heavily upon parameter
            entities. Several of the parameter entities that are declared in document-type shells
            contain references to other parameter entities. Because parameter entities must be
            declared before they are used, the order of the sections in a DTD-based document-type
            shell is significant.</p>
        <p>A DTD-based document-type shell contains the following sections:</p>
        <ol>
            <li>
                <xref href="#shell-dtd-coding-reqs/topic-map-entity-declarations" format="dita"/>
            </li>
            <li>
                <xref href="#shell-dtd-coding-reqs/domain-constraint-integration" format="dita"
                /></li>
            <li><xref href="#shell-dtd-coding-reqs/domain-entity-declarations" format="dita"/>
            </li>
            <li>
                <xref href="#shell-dtd-coding-reqs/domain-attributes-declarations" format="dita"/>
            </li>
            <li>
                <xref href="#shell-dtd-coding-reqs/domain-extensions" format="dita"/>
            </li>
            <li>
                <xref href="#shell-dtd-coding-reqs/domain-attribute-extensions" format="dita"/>
            </li>
            <li>
                <xref href="#shell-dtd-coding-reqs/topic-nesting-overrides" format="dita"/>
            </li>
            <li>
                <xref href="#shell-dtd-coding-reqs/domains-attribute-override" format="dita"/>
            </li>
            <li>
                <xref href="#shell-dtd-coding-reqs/content-constraint-integration" format="dita"/>
            </li>
            <li>
                <xref href="#shell-dtd-coding-reqs/topic-map-element-integration" format="dita"/>
            </li>
            <li>
                <xref href="#shell-dtd-coding-reqs/domain-element-integration" format="dita"/>
            </li>
        </ol>
        <p>Each of the sections in a DTD-based document-type shell follows a pattern. These patterns
            help ensure that the shell follows XML parsing rules for DTDs; they also establish a
            modular design that simplifies creation of new document-type shells.</p>
        <!--<p>By convention, an <filepath>.ent</filepath> file extension is used to indicate files that define only parameter entities, while a <filepath>.mod</filepath> file extension is used to indicate files that define elements or <ph rev="2.0">perform element configuration (constraint and expansion).</ph></p>-->
        <dl>
            <dlentry id="topic-map-entity-declarations">
                <dt> Topic [or map] entity declarations </dt>
                <dd>
                    <p>This section declares and references an external parameter entity for each of
                        the following items: </p>
                    <ul>
                        <li>The top-level topic or map type that the document-type shell
                            configures</li>
                        <li>Any additional structural modules that are used by the document type
                            shell</li>
                    </ul>
                    <p>The parameter entity is named
                            <codeph><varname>type-name</varname>-dec</codeph>.</p>
                    <example>
                        <p>In the following example, the <xmlelement>concept</xmlelement>
                            specialization is integrated into a document-type shell:</p>
                        <codeblock>
&lt;!-- ============================================================= -->
&lt;!--              TOPIC ENTITY DECLARATIONS                        -->
&lt;!-- ============================================================= -->

&lt;!ENTITY % concept-dec     
  PUBLIC "-//OASIS//ENTITIES DITA 2.0 Concept//EN" 
         "concept.ent"
>%concept-dec;</codeblock>
                    </example>
                </dd>
            </dlentry>
            <dlentry id="domain-constraint-integration">
                <dt>Domain constraint integration</dt>
                <dd>
                    <p>This section declares and references an external parameter entity for each
                        domain-constraint module that is integrated into the document-type
                        shell.</p>
                    <p>The parameter entity is named
                            <codeph><varname>descriptorDomainName</varname>-c-dec</codeph>.</p>
                    <example>
                        <p>In the following example, the entity file for a constraint module that
                            reduces the highlighting domain to a subset is integrated in a
                            document-type shell:</p>
                        <codeblock>&lt;!-- ============================================================= -->
&lt;!--                    DOMAIN CONSTRAINT INTEGRATION              -->
&lt;!-- ============================================================= -->

&lt;!ENTITY % HighlightingDomain-c-dec  
  PUBLIC "-//ACME//ENTITIES DITA Highlighting Domain Constraint//EN" 
  "acme-HighlightingDomainConstraint.mod"
>%basic-HighlightingDomain-c-dec;</codeblock>
                    </example>
                </dd>
            </dlentry>
            <dlentry id="domain-entity-declarations">
                <dt> Domain entity declarations </dt>
                <dd>
                    <p>This section declares and references an external parameter entity for each
                        element-domain module that is integrated into the document-type shell.</p>
                    <p>The parameter entity is named
                            <codeph><varname>shortDomainName</varname>-dec</codeph>.</p>
                    <example>
                        <p>In the following example, the entity file for the highlighting domain is
                            included in a document-type shell:</p>
                        <codeblock>&lt;!-- ============================================================= -->
&lt;!--             DOMAIN ENTITY DECLARATIONS                        -->
&lt;!-- ============================================================= -->

&lt;!ENTITY % hi-d-dec PUBLIC
    "-//OASIS//ENTITIES DITA 2.0 Highlight Domain//EN" 
    "highlightDomain.ent"
>%hi-d-dec;</codeblock>
                    </example>
                </dd>
            </dlentry>
            <dlentry id="domain-attributes-declarations">
                <dt> Domain attributes declarations </dt>
                <dd>
                    <p>This section declares and references an external parameter entity for each
                        attribute domain that is integrated into the document-type shell.</p>
                    <p>The parameter entity is named
                            <codeph><varname>domainName</varname>-dec</codeph>.</p>
                    <example>
                        <p>In the following example, the entity file for the
                                <xmlatt>deliveryTarget</xmlatt> attribute domain is included in a
                            document-type shell:</p>
                        <codeblock>&lt;!-- ============================================================= -->
&lt;!--             DOMAIN ATTRIBUTES DECLARATIONS                    -->
&lt;!-- ============================================================= -->

&lt;!ENTITY % deliveryTargetAtt-d-dec
  PUBLIC "-//OASIS//ENTITIES DITA 2.0 Delivery Target Attribute Domain//EN"
         "deliveryTargetAttDomain.ent"
>%deliveryTargetAtt-d-dec;</codeblock>
                    </example>
                </dd>
            </dlentry>
            <dlentry id="domain-extensions">
                <dt> Domain extensions </dt>
                <dd>
                    <p>This section declares and references a parameter entity for each element that
                        is extended by one or more domain modules. These entities are used by later
                        modules to define content models; redefining the entity adds domain
                        specializations wherever the base element is allowed.</p>
                    <example>
                        <p>In the following example, the entity for the <xmlelement>pre</xmlelement>
                            element is redefined to add specializations from the programming,
                            software, and user interface domains:</p>
                        <codeblock>&lt;!-- ============================================================= -->
&lt;!--                    DOMAIN EXTENSIONS                          -->
&lt;!-- ============================================================= -->

&lt;!ENTITY % pre
    "pre        | 
     %pr-d-pre; | 
     %sw-d-pre; | 
     %ui-d-pre;"></codeblock>
                    </example>
                </dd>
            </dlentry>
            <dlentry id="domain-attribute-extensions">
                <dt> Domain attribute extensions </dt>
                <dd>
                    <p>This section redefines the parameter entity for each attribute domain that is
                        integrated <ph rev="2.0">globally</ph> into the document-type shell. The
                        redefinition adds an extension to the parameter entity for the relevant
                        attribute.</p>
                    <example>
                        <p>In the following example, the parameter entities for the
                                <xmlatt>base</xmlatt> and <xmlatt>props</xmlatt> attributes are
                            redefined to include the <xmlatt>newfrombase</xmlatt>,
                                <xmlatt>othernewfrombase</xmlatt>, <xmlatt>new</xmlatt>, and
                                <xmlatt>othernew</xmlatt> attributes:</p>
                        <codeblock>&lt;!-- ============================================================= -->
&lt;!--                    DOMAIN ATTRIBUTE EXTENSIONS                -->
&lt;!-- ============================================================= -->

&lt;!ENTITY % base-attribute-extensions
        "%newfrombaseAtt-d-attribute; 
         %othernewfrombaseAtt-d-attribute;"&gt;

&lt;!ENTITY % props-attribute-extensions
        "%newAtt-d-attribute; 
         %othernewAtt-d-attribute;"&gt;</codeblock>
                    </example>
                </dd>
            </dlentry>
            <dlentry id="topic-nesting-overrides">
                <dt> Topic nesting override </dt>
                <dd>
                    <p>This section redefines the entity that controls topic nesting for each topic
                        type that is integrated into the document-type shell.</p>
                    <p>The parameter entity is named
                            <codeph><varname>topictype</varname>-info-types</codeph>.</p>
                    <p>The definition usually is an "OR" list of the topic types that can be nested
                        in the parent topic type. Use the literal root-element name, not the
                        corresponding parameter entity. Topic nesting can be disallowed completely
                        by specifying the <xmlelement>no-topic-nesting</xmlelement> element.</p>
                    <example>
                        <p>In the following example, the parameter entity specifies that
                                <xmlelement>concept</xmlelement> can nest any number of
                                <xmlelement>concept</xmlelement> or
                                <xmlelement>myTopicType</xmlelement> topics, in any order:</p>
                        <codeblock>&lt;!-- ============================================================= -->
&lt;!--                    TOPIC NESTING OVERRIDE                     -->
&lt;!-- ============================================================= -->

&lt;!ENTITY % concept-info-types "concept | myTopicType"></codeblock>
                    </example>
                </dd>
            </dlentry>
            <dlentry id="domains-attribute-override">
                <dt> Specializations attribute override </dt>
                <dd>
                    <p>This section redefines the <codeph>included-domains</codeph> entity to
                        include the text entity for each attribute domain that is either included or
                        reused in the document-type shell. The redefinition sets the effective value
                        of the <xmlatt>specializations</xmlatt> attribute for the top-level document
                        type that is configured by the document-type shell.</p>
                    <draft-comment author="Kristen J Eberlein" time="10 April 2021">
                        <p>What is the difference between "including an attribute domain" and
                            "reusing an attribute domain"? What distinction where we trying to make
                            here?</p>
                    </draft-comment>
                    <example>
                        <p>In the following example, parameter entities are included for the DITA
                            conditional-processing attributes:</p>
                        <codeblock>&lt;!-- ============================================================= -->
&lt;!--                 SPECIALIZATIONS ATTRIBUTE OVERRIDE            -->
&lt;!-- ============================================================= -->

&lt;!ENTITY included-domains
                          "&amp;audienceAtt-d-att;
                           &amp;deliveryTargetAtt-d-att;
                           &amp;otherpropsAtt-d-att;
                           &amp;platformAtt-d-att;
                           &amp;productAtt-d-att;"
></codeblock>
                    </example>
                </dd>
            </dlentry>
            <dlentry id="content-constraint-integration">
                <dt><ph rev="2.0">Element-type configuration integration</ph></dt>
                <dd>
                    <p>This section declares and references the parameter entity for each <ph
                            rev="2.0">element-configuration module (constraint and expansion)</ph>
                        that is integrated into the document-type shell</p>
                    <p>The parameter entity is named
                            <codeph><varname>descriptionElement</varname>-c-def</codeph>.</p>
                    <example>
                        <p>In the following example, the module that constrains the content model
                            for the <xmlelement>taskbody</xmlelement> element is integrated into the
                            document-type shell for strict task:</p>
                        <codeblock>&lt;!ENTITY % strictTaskbody-c-def  
  PUBLIC "-//OASIS//ELEMENTS DITA 2.0 Strict Taskbody Constraint//EN" 
  "strictTaskbodyConstraint.mod"
>%strictTaskbody-c-def;</codeblock>
                    </example>
                </dd>
            </dlentry>
            <dlentry id="topic-map-element-integration">
                <dt> Topic [or map] element integration </dt>
                <dd>
                    <p>This section declares and references a parameter entity for each structural
                        module that is integrated into the document-type shell.</p>
                    <p>The parameter entity is named
                            <codeph><varname>structuralType</varname>-type</codeph>.</p>
                    <p>The structural modules are included in ancestry order, so that the parameter
                        entities that are used in an ancestor module are available for use in
                        specializations. When a structural module depends on elements from a
                        vocabulary module that is not part of its ancestry, the module upon which
                        the structural module has a dependency (and any ancestor modules not already
                        included) need to be included before the module with a dependency.</p>
                    <example>
                        <p>In the following example, the structural modules required by the
                            troubleshooting topic are integrated into the document-type shell:</p>
                        <codeblock>&lt;!-- ============================================================= -->
&lt;!--                    TOPIC ELEMENT INTEGRATION                  -->
&lt;!-- ============================================================= -->

&lt;!ENTITY % topic-type
  PUBLIC "-//OASIS//ELEMENTS DITA 2.0 Topic//EN"
         "../../base/dtd/topic.mod"
>%topic-type;

&lt;!ENTITY % task-type
  PUBLIC "-//OASIS//ELEMENTS DITA 2.0 Task//EN"
         "task.mod"
>%task-type;

&lt;!ENTITY % troubleshooting-type
  PUBLIC "-//OASIS//ELEMENTS DITA 2.0 Troubleshooting//EN"
         "troubleshooting.mod"
>%troubleshooting-type;</codeblock>
                    </example>
                </dd>
            </dlentry>
            <dlentry id="domain-element-integration">
                <dt> Domain element integration </dt>
                <dd>
                    <p>This section declares and references a parameter entity for each element
                        domain that is integrated tinto the document-type shell.</p>
                    <!--<p>For each element domain that is integrated into the document-type shell, this section declares a parameter entity and references the external module file where the element domain is defined. </p>-->
                    <p>The parameter entity is named
                            <codeph><varname>domainName</varname>-def</codeph>.</p>
                    <example>
                        <p>In the following example, the element-definition file for the
                            highlighting domain is integrated into the document-type shell:</p>
                        <codeblock>&lt;!-- ============================================================= -->
&lt;!--                    DOMAIN ELEMENT INTEGRATION                 -->
&lt;!-- ============================================================= -->

&lt;!ENTITY % hi-d-def PUBLIC
    "-//OASIS//ELEMENTS DITA 2.0 Highlight Domain//EN" 
    "highlightDomain.mod"
>%hi-d-def;</codeblock>
                    </example>
                    <p>If a structural module depends on a domain, the domain module needs to be
                        included before the structural module. This erases the boundary between the
                        final two sections of the DTD-based document-type shell, but it is necessary
                        to ensure that modules are embedded after their dependencies. Technically,
                        the only solid requirement is that both domain and structural modules be
                        declared after all other modules that they specialize from or depend on.</p>
                </dd>
            </dlentry>
        </dl>
    </conbody>
</concept>
